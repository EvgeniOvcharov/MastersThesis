heq = eq,
control = list(xtol_rel = 1e-9, print_level = 0)
)
)
S_DC
home_adv <- S_DC$par[2*n+1]
rho_par <- S_DC$par[2*n+2]
alpha <- S_DC$par[1:n]
beta <- S_DC$par[(n+1):(2*n)]
teams$alpha <- alpha
teams$beta <- beta
game_statistics_mod2 <- left_join(game_statistics,teams, by = c("team"))
game_statistics_mod2 <- game_statistics_mod2 %>%
mutate(skill = alpha*beta) %>%
arrange(desc(skill))
head(game_statistics_mod2)
game_statistics_mod2$skill2 <- game_statistics_mod2$alpha/game_statistics_mod2$beta
f_lambda = function(alfa, beta, gama){
gama*alfa[x$local_team_index]*beta[x$visitor_team_index]
}
f_mu = function(alfa, beta, gama){
alfa[x$visitor_team_index]*beta[x$local_team_index]
}
f_l = function(w) {
alfa = w[1:n]
beta = w[(n+1):(2*n)]
gama = w[2*n+1]
lambda = f_lambda(alfa, beta, gama)
mu =     f_mu(alfa, beta, gama)
- sum(x$localGoals * log(lambda) + x$visitorGoals * log(mu) - lambda - mu)
}
eq = function(w) {
alfa = w[1:n]
c(log(sum(alfa)/n))
}
w0 = rep(1, 2*n+1)
options(warn = -1)
suppressMessages(
S <- slsqp(w0, fn = f_l,
heq = eq,
control = list(xtol_rel = 1e-9, print_level = 0)
)
)
S
alpha <- S$par[1:n]
beta <- S$par[(n+1):(2*n)]
teams$alpha <- alpha
teams$beta <- beta
names(teams)[1]<-"team"
names(teams)[2]<-"team index"
game_statistics_mod1 <- left_join(game_statistics,teams, by = c("team"))
game_statistics_mod1 <- game_statistics_mod1 %>%
mutate(skill = alpha*beta) %>%
arrange(desc(skill))
head(game_statistics_mod1)
View(game_statistics_mod1)
game_statistics_mod1$skill2<-game_statistics_mod1$alpha/game_statistics_mod1$beta
library("dplyr")
library("tidyr")
library("ggplot2")
library("reshape2")
library("nloptr")
library("data.table")
data <- read.csv("https://raw.githubusercontent.com/plamenapp/MastersThesis/master/FMEL_Dataset.csv")
data <- data %>%
filter(season == "2016-17" | season == "2017-18" )
head(data)
melt_results <- function(results_df) {
results_df %>%
# select only relevant columns
select(localTeam, visitorTeam, localGoals, visitorGoals, date) %>%
gather(location, team,  -localGoals, -visitorGoals, -date) %>%
# calculate goals for/against the team
mutate(g_for = case_when(
location == "localTeam" ~ localGoals,
location == "visitorTeam" ~ visitorGoals
)) %>%
mutate(g_ag = case_when(
location == "localTeam" ~ visitorGoals,
location == "visitorTeam" ~ localGoals
))
}
data_melted <- data %>%
melt_results()
head(data_melted)
game_statistics <- data_melted %>%
mutate(win = ifelse(g_for > g_ag, 1,0),
loss = ifelse(g_for < g_ag, 1,0),
draw = ifelse(g_for == g_ag, 1,0))
game_statistics <- game_statistics %>%
group_by(team) %>%
summarise ( W = sum(win),
L = sum (loss),
D = sum(draw),
GF = sum(g_for),
GA = sum(g_ag),
GD = GF - GA,
Pts = 3*W + 1*D
) %>%
arrange(desc(Pts))
head(game_statistics)
data_melted %>%
ggplot(., aes(x = g_for, fill = location)) +
geom_density(adjust = 8, alpha = 0.5) +
scale_fill_manual(values = c("green", "red")) +
scale_x_continuous(breaks = 0:6) +
labs(title = "Goals scored at home and away",
x = "goals scored",
y = "density") +
theme_minimal()
p1 <- data_melted %>%
filter( location == "localTeam") %>%
ggplot(., aes(x = g_for)) +
geom_density(adjust = 8, alpha = 0.5, aes(fill= "green")) +
scale_fill_manual(values = c("green")) +
scale_x_continuous(breaks = 0:6) +
labs(title = "Goals scored at home vs simulated Poisson distribution",
x = "goals scored",
y = "density") +
theme_minimal() +
theme(legend.position = "none")
local_team_data <- data_melted %>%
filter( location == "localTeam")
simulated_poisson <- data.frame(dist = rpois(100000, mean(local_team_data$localGoals)))
p1 + geom_density(data = simulated_poisson, aes(x = dist),
fill = NA, adjust = 8, alpha = 0.2)
gama = sum(data$localGoals)/sum(data$visitorGoals)
gama
data_model1 <- data_melted %>%
group_by(team) %>%
summarise(alfa = mean(g_for),
beta = mean(g_ag))
head(data_model1)
model1_output <- left_join(data, data_model1[c("team", "alfa", "beta")], by = c("localTeam" = "team"))
model1_output <- model1_output %>%
rename(alfa_local=alfa) %>%
rename(beta_local=beta)
model1_output <- left_join(model1_output, data_model1[c("team", "alfa", "beta")], by = c("visitorTeam" = "team"))
model1_output <- model1_output %>%
rename(alfa_visitor=alfa) %>%
rename(beta_visitor=beta)
model1_output <- model1_output %>%
mutate(prediction_local = alfa_local*beta_visitor*gama,
prediction_visit = alfa_visitor*beta_local)
head(model1_output)
game_predicted_statistics <- model1_output %>%
# select only relevant columns
select(localTeam, visitorTeam, prediction_local, prediction_visit, date) %>%
gather(location, team,  -prediction_local,-prediction_visit, -date) %>%
# calculate goals for/against the team
mutate(g_for = case_when(
location == "localTeam" ~ prediction_local,
location == "visitorTeam" ~ prediction_visit
)) %>%
mutate(g_ag = case_when(
location == "localTeam" ~ prediction_visit,
location == "visitorTeam" ~ prediction_local
)) %>%
mutate(win = ifelse(g_for > g_ag, 1,0),
loss = ifelse(g_for < g_ag, 1,0),
draw = ifelse(g_for == g_ag, 1,0)) %>%
group_by(team) %>%
summarise ( W = sum(win),
L = sum (loss),
D = sum(draw),
GF = sum(g_for),
GA = sum(g_ag),
GD = GF - GA,
Pts = 3*W + 1*D
) %>%
arrange(desc(Pts))
head(game_predicted_statistics)
x = data[,c(5:8)]
n = n_distinct(x$localTeam)
teams <- matrix(c(unique(x$localTeam),1:n), nrow = n)
teams <- as.data.frame(teams)
x <- left_join(x,teams, by = c("localTeam" = "V1"))
x <- left_join(x,teams, by = c("visitorTeam" = "V1"))
x <- x %>%
rename(local_team_index = V2.x,
visitor_team_index = V2.y)
x <-x [,c(3:6)]
x <- as.data.table(x)
x$local_team_index <- as.integer(x$local_team_index)
x$visitor_team_index <- as.integer(x$visitor_team_index)
x <- as.data.table(x)
head(x)
f_lambda = function(alfa, beta, gama){
gama*alfa[x$local_team_index]*beta[x$visitor_team_index]
}
f_mu = function(alfa, beta, gama){
alfa[x$visitor_team_index]*beta[x$local_team_index]
}
f_l = function(w) {
alfa = w[1:n]
beta = w[(n+1):(2*n)]
gama = w[2*n+1]
lambda = f_lambda(alfa, beta, gama)
mu =     f_mu(alfa, beta, gama)
- sum(x$localGoals * log(lambda) + x$visitorGoals * log(mu) - lambda - mu)
}
eq = function(w) {
alfa = w[1:n]
c(log(sum(alfa)/n))
}
w0 = rep(1, 2*n+1)
options(warn = -1)
suppressMessages(
S <- slsqp(w0, fn = f_l,
heq = eq,
control = list(xtol_rel = 1e-9, print_level = 0)
)
)
S
alpha <- S$par[1:n]
beta <- S$par[(n+1):(2*n)]
teams$alpha <- alpha
teams$beta <- beta
names(teams)[1]<-"team"
names(teams)[2]<-"team index"
game_statistics_mod1 <- left_join(game_statistics,teams, by = c("team"))
game_statistics_mod1 <- game_statistics_mod1 %>%
mutate(skill = alpha*beta) %>%
arrange(desc(skill))
head(game_statistics_mod1)
f_lambda = function(alfa, beta, gama){
gama*alfa[x$local_team_index]*beta[x$visitor_team_index]
}
f_mu = function(alfa, beta, gama){
alfa[x$visitor_team_index]*beta[x$local_team_index]
}
tau<- rep(0,nrow(x))
f_tau = function(lambda, mu, rho){
for(i in 1:nrow(x)){
if (x$localGoals[i]== 0 && x$visitorGoals[i] == 0) {
tau[i] = 1-lambda[i]*mu[i]*rho
} else if (x$localGoals[i]== 0 && x$visitorGoals[i] == 1) {
tau[i] = 1+lambda[i]*rho
} else if (x$localGoals[i]== 1 && x$visitorGoals[i] == 0) {
tau[i] = 1+mu[i]*rho
} else if (x$localGoals[i] == 1 && x$visitorGoals[i] == 1) {
tau[i] = 1-rho
} else {tau[i] = 1}
}
return(tau)}
f_l = function(w) {
alfa = w[1:n]
beta = w[(n+1):(2*n)]
gama = w[2*n+1]
rho = w[2*n+2]
lambda = f_lambda(alfa, beta, gama)
mu = f_mu(alfa, beta, gama)
tau = f_tau(lambda, mu, rho)
- sum(x$localGoals * log(lambda) + x$visitorGoals * log(mu) - lambda - mu + log(tau))
}
eq = function(w) {
alfa = w[1:n]
c(log(sum(alfa)/n))
}
w0 = c(rep(1, 2*n+1),0)
options(warn = -1)
suppressMessages(
S_DC <- slsqp(w0, fn = f_l,
heq = eq,
control = list(xtol_rel = 1e-9, print_level = 0)
)
)
S_DC
home_adv <- S_DC$par[2*n+1]
rho_par <- S_DC$par[2*n+2]
alpha <- S_DC$par[1:n]
beta <- S_DC$par[(n+1):(2*n)]
teams$alpha <- alpha
teams$beta <- beta
game_statistics_mod2 <- left_join(game_statistics,teams, by = c("team"))
game_statistics_mod2 <- game_statistics_mod2 %>%
mutate(skill = alpha*beta) %>%
arrange(desc(skill))
head(game_statistics_mod2)
home_adv <- S_DC$par[2*n+1]
rho_par <- S_DC$par[2*n+2]
alpha <- S_DC$par[1:n]
beta <- S_DC$par[(n+1):(2*n)]
teams$alpha <- alpha
teams$beta <- beta
game_statistics_mod2 <- left_join(game_statistics,teams, by = c("team"))
game_statistics_mod2 <- game_statistics_mod2 %>%
mutate(skill = alpha/beta) %>%
arrange(desc(skill))
head(game_statistics_mod2)
library("dplyr")
library("tidyr")
library("ggplot2")
library("reshape2")
library("nloptr")
library("data.table")
data <- read.csv("https://raw.githubusercontent.com/plamenapp/MastersThesis/master/FMEL_Dataset.csv")
data <- data %>%
filter(season == "2017-18" )
head(data)
melt_results <- function(results_df) {
results_df %>%
# select only relevant columns
select(localTeam, visitorTeam, localGoals, visitorGoals, date) %>%
gather(location, team,  -localGoals, -visitorGoals, -date) %>%
# calculate goals for/against the team
mutate(g_for = case_when(
location == "localTeam" ~ localGoals,
location == "visitorTeam" ~ visitorGoals
)) %>%
mutate(g_ag = case_when(
location == "localTeam" ~ visitorGoals,
location == "visitorTeam" ~ localGoals
))
}
data_melted <- data %>%
melt_results()
head(data_melted)
game_statistics <- data_melted %>%
mutate(win = ifelse(g_for > g_ag, 1,0),
loss = ifelse(g_for < g_ag, 1,0),
draw = ifelse(g_for == g_ag, 1,0))
game_statistics <- game_statistics %>%
group_by(team) %>%
summarise ( W = sum(win),
L = sum (loss),
D = sum(draw),
GF = sum(g_for),
GA = sum(g_ag),
GD = GF - GA,
Pts = 3*W + 1*D
) %>%
arrange(desc(Pts))
head(game_statistics)
data_melted %>%
ggplot(., aes(x = g_for, fill = location)) +
geom_density(adjust = 8, alpha = 0.5) +
scale_fill_manual(values = c("green", "red")) +
scale_x_continuous(breaks = 0:6) +
labs(title = "Goals scored at home and away",
x = "goals scored",
y = "density") +
theme_minimal()
p1 <- data_melted %>%
filter( location == "localTeam") %>%
ggplot(., aes(x = g_for)) +
geom_density(adjust = 8, alpha = 0.5, aes(fill= "green")) +
scale_fill_manual(values = c("green")) +
scale_x_continuous(breaks = 0:6) +
labs(title = "Goals scored at home vs simulated Poisson distribution",
x = "goals scored",
y = "density") +
theme_minimal() +
theme(legend.position = "none")
local_team_data <- data_melted %>%
filter( location == "localTeam")
simulated_poisson <- data.frame(dist = rpois(100000, mean(local_team_data$localGoals)))
p1 + geom_density(data = simulated_poisson, aes(x = dist),
fill = NA, adjust = 8, alpha = 0.2)
gama = sum(data$localGoals)/sum(data$visitorGoals)
gama
data_model1 <- data_melted %>%
group_by(team) %>%
summarise(alfa = mean(g_for),
beta = mean(g_ag))
head(data_model1)
model1_output <- left_join(data, data_model1[c("team", "alfa", "beta")], by = c("localTeam" = "team"))
model1_output <- model1_output %>%
rename(alfa_local=alfa) %>%
rename(beta_local=beta)
model1_output <- left_join(model1_output, data_model1[c("team", "alfa", "beta")], by = c("visitorTeam" = "team"))
model1_output <- model1_output %>%
rename(alfa_visitor=alfa) %>%
rename(beta_visitor=beta)
model1_output <- model1_output %>%
mutate(prediction_local = alfa_local*beta_visitor*gama,
prediction_visit = alfa_visitor*beta_local)
head(model1_output)
game_predicted_statistics <- model1_output %>%
# select only relevant columns
select(localTeam, visitorTeam, prediction_local, prediction_visit, date) %>%
gather(location, team,  -prediction_local,-prediction_visit, -date) %>%
# calculate goals for/against the team
mutate(g_for = case_when(
location == "localTeam" ~ prediction_local,
location == "visitorTeam" ~ prediction_visit
)) %>%
mutate(g_ag = case_when(
location == "localTeam" ~ prediction_visit,
location == "visitorTeam" ~ prediction_local
)) %>%
mutate(win = ifelse(g_for > g_ag, 1,0),
loss = ifelse(g_for < g_ag, 1,0),
draw = ifelse(g_for == g_ag, 1,0)) %>%
group_by(team) %>%
summarise ( W = sum(win),
L = sum (loss),
D = sum(draw),
GF = sum(g_for),
GA = sum(g_ag),
GD = GF - GA,
Pts = 3*W + 1*D
) %>%
arrange(desc(Pts))
head(game_predicted_statistics)
x = data[,c(5:8)]
n = n_distinct(x$localTeam)
teams <- matrix(c(unique(x$localTeam),1:n), nrow = n)
teams <- as.data.frame(teams)
x <- left_join(x,teams, by = c("localTeam" = "V1"))
x <- left_join(x,teams, by = c("visitorTeam" = "V1"))
x <- x %>%
rename(local_team_index = V2.x,
visitor_team_index = V2.y)
x <-x [,c(3:6)]
x <- as.data.table(x)
x$local_team_index <- as.integer(x$local_team_index)
x$visitor_team_index <- as.integer(x$visitor_team_index)
x <- as.data.table(x)
head(x)
f_lambda = function(alfa, beta, gama){
gama*alfa[x$local_team_index]*beta[x$visitor_team_index]
}
f_mu = function(alfa, beta, gama){
alfa[x$visitor_team_index]*beta[x$local_team_index]
}
f_l = function(w) {
alfa = w[1:n]
beta = w[(n+1):(2*n)]
gama = w[2*n+1]
lambda = f_lambda(alfa, beta, gama)
mu =     f_mu(alfa, beta, gama)
- sum(x$localGoals * log(lambda) + x$visitorGoals * log(mu) - lambda - mu)
}
eq = function(w) {
alfa = w[1:n]
c(log(sum(alfa)/n))
}
w0 = rep(1, 2*n+1)
options(warn = -1)
suppressMessages(
S <- slsqp(w0, fn = f_l,
heq = eq,
control = list(xtol_rel = 1e-9, print_level = 0)
)
)
S
alpha <- S$par[1:n]
beta <- S$par[(n+1):(2*n)]
teams$alpha <- alpha
teams$beta <- beta
names(teams)[1]<-"team"
names(teams)[2]<-"team index"
game_statistics_mod1 <- left_join(game_statistics,teams, by = c("team"))
game_statistics_mod1 <- game_statistics_mod1 %>%
mutate(skill = alpha*beta) %>%
arrange(desc(skill))
head(game_statistics_mod1)
f_lambda = function(alfa, beta, gama){
gama*alfa[x$local_team_index]*beta[x$visitor_team_index]
}
f_mu = function(alfa, beta, gama){
alfa[x$visitor_team_index]*beta[x$local_team_index]
}
tau<- rep(0,nrow(x))
f_tau = function(lambda, mu, rho){
for(i in 1:nrow(x)){
if (x$localGoals[i]== 0 && x$visitorGoals[i] == 0) {
tau[i] = 1-lambda[i]*mu[i]*rho
} else if (x$localGoals[i]== 0 && x$visitorGoals[i] == 1) {
tau[i] = 1+lambda[i]*rho
} else if (x$localGoals[i]== 1 && x$visitorGoals[i] == 0) {
tau[i] = 1+mu[i]*rho
} else if (x$localGoals[i] == 1 && x$visitorGoals[i] == 1) {
tau[i] = 1-rho
} else {tau[i] = 1}
}
return(tau)}
f_l = function(w) {
alfa = w[1:n]
beta = w[(n+1):(2*n)]
gama = w[2*n+1]
rho = w[2*n+2]
lambda = f_lambda(alfa, beta, gama)
mu = f_mu(alfa, beta, gama)
tau = f_tau(lambda, mu, rho)
- sum(x$localGoals * log(lambda) + x$visitorGoals * log(mu) - lambda - mu + log(tau))
}
eq = function(w) {
alfa = w[1:n]
c(log(sum(alfa)/n))
}
w0 = c(rep(1, 2*n+1),0)
options(warn = -1)
suppressMessages(
S_DC <- slsqp(w0, fn = f_l,
heq = eq,
control = list(xtol_rel = 1e-9, print_level = 0)
)
)
S_DC
home_adv <- S_DC$par[2*n+1]
rho_par <- S_DC$par[2*n+2]
alpha <- S_DC$par[1:n]
beta <- S_DC$par[(n+1):(2*n)]
teams$alpha <- alpha
teams$beta <- beta
game_statistics_mod2 <- left_join(game_statistics,teams, by = c("team"))
game_statistics_mod2 <- game_statistics_mod2 %>%
mutate(skill = alpha/beta) %>%
arrange(desc(skill))
head(game_statistics_mod2)
